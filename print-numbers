#!/bin/sh
# XXX lots of linuxism, despite being a supposedly posix script...
# XXX this shell script (like most of scripts) is too verbose...

# XXX https://github.com/koalaman/shellcheck/wiki/SC2059
p2() { printf "$@" >&2; }
bold=$(tput smso)
offbold=$(tput rmso)
p2 "${bold}%s runs numbers to print latency numbers.${offbold}\n" "$0"
p2 "it can take 10 or 20 seconds depending on memory size.\n"
p2 "%s checks if ./build/numbers is present, else make all to build it.\n" "$0"
if [ ! -x "${PWD}"/build/numbers ]; then
  make all
fi
ex() {  
  p2 "${bold}exiting.${offbold}\n"
  exit "$1"
}
# check prerequisite binaries and exit if they are not present
missing=0
for x in nproc modprobe lsmod; do
  which "${x}" >/dev/null ||
    { p2 "\n\t%s is missing, please install it\n" "${x}" &&
      missing=$((missing + 1)); }
done
if [ "${missing}" -gt 0 ]; then
  p2 "%s cannot run without the above missing binaries.\n" "$0"
  p2 "${bold}exiting.${offbold}\n"
  ex 1
fi
# XXX check if numbers is installed by make install in ~/.local/bin or /u/l/b.
numbers="${PWD}/build/numbers"
p2 "${bold}enter 'q' to quit; enter 'h' to print help/quit;"
p2 " enter any key to run numbers:${offbold} "
read -r x
case "$x" in
q) ex 0 ;;
h) "${numbers}" -h; ex 0 ;;
*)
  p2 "%s will carry out following 5 steps to print latency numbers\n" "$0" >&2
  p2 "1. set the cores scaling_governor to performance mode\n"
  p2 "2. modprobe msr if msr is not yet loaded\n"
  p2 "3. run pyperf system tune to prepare the machine\n"
  p2 "4. run numbers\n"
  p2 "5. reset the cores to the original mode and exit.\n"
  p2 "n.b. sudo is required for all steps except for 4.\n"
  p2 "n.b. most likely you will need to enter password to sudo only once.\n"
  p2 "${bold}enter 'y' to proceed; enter any other key to quit:${offbold} "
  read -r y
  case "$y" in
  y)
    p2 "\n\n"
    cpuid=$(($$ % $(nproc)))
    p2 "%s: 1. set the cores scaling_governor to performance mode\n" "$0"
    sg=/sys/devices/system/cpu/cpu"${cpuid}"/cpufreq/scaling_governor
    sgall="/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor"
    orig_governor=$(cat "${sg}")
    p2 "original scaling_governor=%s\n" "${orig_governor}"
    if [ "${orig_governor}" != "performance" ]; then
      echo performance | sudo tee ${sgall}
    fi
    p2 "%s: 2. running modprobe msr if msr is not yet loaded\n" "$0"
    lsmod | grep -w msr >/dev/null || sudo modprobe msr
    p2 "%s: 3. running pyperf system tune to prepare the machine\n" "$0"
    sudo pyperf system tune
    p2 "\n"
    p2 "%s: 4. running numbers (will take several seconds)\n" "$0"
    "${numbers}"
    p2 "\n"
    p2 "%s: 5. resetting the cores to the original mode and exiting\n" "$0"
    echo "${orig_governor}" | sudo tee ${sgall}
    ex 0
    ;;
  *)
    ex 1
    ;;
  esac
  ;;
esac
